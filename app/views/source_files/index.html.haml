- elements = @folders + @source_files

%div#crumbs
  = render :partial => "crumbs"
- if @person
  %div#toolbar
    = render :partial => "toolbar"
%div#source_files
  %ul
    %li.column.index_icon
      %ul
        %li.header &nbsp;
        - reset_cycle("default")
        - elements.each do |element|
          - selected = (element.id.to_s == params[:selected_id])
          = render :partial => "clickable_row", |
                   :object => {:element => element,
                               :color => (selected ? "selected" : cycle("odd", "even")),
                               :icon => "icon",
                               :content => {:image => "#{element.class.to_s.underscore}.png"}}
    %li.column.index{:class => ("login" if @person)}
      %ul
        %li.header{:title => "Name"} Name
        - reset_cycle("default")
        - elements.each do |element|
          - selected = (element.id.to_s == params[:selected_id])
          = render :partial => "clickable_row", |
                   :object => {:element => element,
                               :content => "#{element.name}#{"/" if element.is_a? Folder}",
                               :color => (selected ? "selected blue" : cycle("odd blue", "even blue"))}
    %li.column.index.code
      %ul
        %li.header{:title => "Code"} Code
        - reset_cycle("default")
        - elements.each do |element|
          - selected = (element.id.to_s == params[:selected_id])
          = render :partial => "clickable_row", |
                   :object => {:element => element,
                               :content => (element.code if element.is_a? SourceFile),
                               :color => (selected ? "selected" : cycle("odd", "even"))}
    %li.column.index{:class => ("login" if @person)}
      %ul
        %li.header{:title => "Age"} Age
        - reset_cycle("default")
        - elements.each do |element|
          - selected = (element.id.to_s == params[:selected_id])
          = render :partial => "clickable_row", |
                   :object => {:element => element,
                               :content => ("Changed #{time_ago_in_words(element.last_update)} ago" if element.is_a? SourceFile and element.last_update),
                               :color => (selected ? "selected" : cycle("odd", "even"))}
    %li.column.index{:class => ("login" if @person)}
      %ul
        %li.header{:title => "Message"} Message
        - reset_cycle("default")
        - elements.each do |element|
          - selected = (element.id.to_s == params[:selected_id])
          = render :partial => "clickable_row", |
                   :object => {:element => element,
                               :content => (element.message if element.is_a? SourceFile),
                               :color => (selected ? "selected#{" last" unless @person}" : cycle("odd#{" last" unless @person}", "even#{" last" unless @person}"))}
    - if @person
      %li.column.index_icon
        %ul
          %li.header &nbsp;
          - reset_cycle("default")
          - elements.each do |element|
            - selected = (element.id.to_s == params[:selected_id])
            = render :partial => "clickable_icon", |
                     :object => {:element => element,
                                 :color => (selected ? "selected last" : cycle("odd last", "even last")),
                                 :content => {:image => "delete"},
                                 :title => "Click here to delete this #{(element.is_a? Folder) ? "folder" : "source file"}.",
                                 :id => "delete"}

= render :partial => "empty" if (@folders + @source_files).blank?
-# functions for clickable_row
:javascript
  $(document).ready(function(){
    $("li.clickable").hover(
      function(){
        $("li." + $(this).attr("id")).addClass("hover")
      },
      function(){
        $("li." + $(this).attr("id")).removeClass("hover")
      }
    )
  })
-# delete functions for each row
- elements.each do |element|
  :javascript
    $(document).ready(function(){
      $("a#delete_#{element.id}").click(function(){
        if (confirm("Are you sure you want to remove the #{(element.is_a? Folder) ? "folder" : "source file"} \"#{element.name}\"#{(" and all of its contents" if element.is_a? Folder)}?")) {
          var f = document.createElement('form')
          f.style.display = 'none'
          this.parentNode.appendChild(f)
          f.method = 'POST'
          f.action = this.href
          var h = document.createElement('input')
          h.setAttribute('type', 'hidden')
          h.setAttribute('name', 'authenticity_token')
          h.setAttribute('value', "#{session[:_csrf_token]}")
          f.appendChild(h)
          var m = document.createElement('input')
          m.setAttribute('type', 'hidden')
          m.setAttribute('name', '_method')
          m.setAttribute('value', 'delete')
          f.appendChild(m)
          f.submit()
        }
        return false
      })
    })
-# add ajax refreshing of locked source files
= render :partial => "ajax_refresh",
         :object => {:path => hash_for_source_files_path.merge({:folder_id => @folder.andand.id, :format => :json})}
